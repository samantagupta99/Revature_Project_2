NULL COLUMNS

import numpy as np
import pandas as pd
df = pd.read_csv("flights.csv")

#SHAPE AND COLUMN NAMES OF DATASET
print("Shape:\n",df.shape)
print("Columns:\n",df.columns)


#xplore how many null values are in each column of your datase
print("Number of missing Values per columns:\n",df.isna().sum())

#PREPROCESSING (REMOVE NULL ROWS)  
flights_new=df.dropna()
print("Number of missing Values per columns after Preprocessing:\n",flights_new.isna().sum())


#flights_new.to_csv('flights_new.csv',index=False)

    
# import plotly.express as px
# fig = px.bar(DAY, x=DAY.index, y='mean',   color='count', height=400, title="Delays in Jan 2019")
# fig.show()



---------------------------------------------------------------------------------------------------------------------------
PLOTS


import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
flights = pd.read_csv("flights.csv")

#SHAPE AND COLUMN NAMES OF DATASET
#print("Shape:\n",df.shape)
#print("Columns:\n",df.columns)


#xplore how many null values are in each column of your datase
#print("Number of missing Values per columns:\n",df.isna().sum())

#PREPROCESSING (REMOVE NULL ROWS)  
#flights_new=df.dropna()
#print("Number of missing Values per columns after Preprocessing:\n",flights_new.isna().sum())


#flights_new.to_csv('flights_new.csv',index=False)

    
# import plotly.express as px
# fig = px.bar(DAY, x=DAY.index, y='mean',   color='count', height=400, title="Delays in Jan 2019")
# fig.show()

def late_or_cancelled(x):
#    if x['ARRIVAL_DELAY'] > 60:
    if x['CANCELLED'] == 1 or x['ARRIVAL_DELAY'] > 60:
        return 1
    else:
        return 0


days_in_month = np.array([31,28,31,30,31,30,31,31,30,31,30,31])
def day_31_to_365(x):
    days_365 = days_in_month[:x['MONTH']-1].sum() + x['DAY']
    return days_365



flights['DAY'] = flights.apply(day_31_to_365,axis = 1)
flights['WEEK'] = flights['DAY']//7
del flights['DAY']

flights['SCHEDULED_DEPARTURE'] = np.ceil(flights['SCHEDULED_DEPARTURE']/600).apply(int)



flights['late or cancelled'] = flights.apply(late_or_cancelled,axis = 1)
flights = flights[flights['CANCELLED']==0]

Delay_vs_Day_of_Week = pd.DataFrame({'delays' : flights.groupby(['DAY_OF_WEEK'])['late or cancelled'].mean()}).reset_index()
Delay_vs_WEEK = pd.DataFrame({'delays' : flights.groupby(['WEEK'])['late or cancelled'].mean()}).reset_index()
Delay_vs_AIRLINE = pd.DataFrame({'delays' : flights.groupby(['AIRLINE'])['late or cancelled'].mean()})#.reset_index()
Delay_vs_SCHEDULED_DEPARTURE = pd.DataFrame({'delays' : flights.groupby(['SCHEDULED_DEPARTURE'])['late or cancelled'].mean()}).reset_index()

fig = plt.figure(figsize=(18.5, 12.5))

sub1 = fig.add_subplot(221) # instead of plt.subplot(2, 2, 1)
sub1.set_title('Week of Year', fontsize=18, color="blue")
sns.barplot(x="WEEK", y="delays", data=Delay_vs_WEEK, palette="Blues_d", ax = sub1)
sub1.set_xticks(list(range(0,52,10)))
sub1.set_xticklabels(list(range(0,52,10)))

sub2 = fig.add_subplot(222)
sub2.set_title('Day of Week', fontsize=18, color="blue")
sns.barplot(x="DAY_OF_WEEK", y="delays", data=Delay_vs_Day_of_Week, palette="Purples_r", ax = sub2)
sub2.set_xticklabels(['Mon','Tue','Wed','Thu','Fri','Sat','Sun'])

sub3 = fig.add_subplot(223)
sub3.set_title('Airline', fontsize=18, color="blue")
sns.barplot(y = list(range(len(Delay_vs_AIRLINE))), x=Delay_vs_AIRLINE['delays'], palette="Oranges_r", ax = sub3, orient="h")
sub3.set_yticks(range(len(Delay_vs_AIRLINE)))
sub3.set_yticklabels(Delay_vs_AIRLINE.index)

sub4 = fig.add_subplot(224)
sns.barplot(x = list(range(len(Delay_vs_SCHEDULED_DEPARTURE))), y=Delay_vs_SCHEDULED_DEPARTURE['delays'], palette="Greens", ax = sub4)
sub4.set_title('Scheduled Departure Time', fontsize=18, color="blue")
sub4.set_xticks([0, 1, 2, 3])
sub4.set_xticklabels(['00:00 - 06:00','06:00 - 12:00','12:00 - 18:00','18:00 - 00:00'])


